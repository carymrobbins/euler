/*
 * Even Fibonacci numbers
 * Problem 2
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms. By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not
 * exceed four million, find the sum of the even-valued terms.
 */

use run::run;

pub fn main() {
    run("002", || {
        assert_eq!(fibs().take(10).collect::<Vec<u64>>(), vec![1, 2, 3, 5, 8, 13, 21, 34, 55, 89]);
        assert_eq!(problem2(), 4_613_732);
    });
}

fn problem2() -> u64 {
    fibs()
        .take_while(|n| *n < 4_000_000)
        .filter(|n| n % 2 == 0)
        .sum()
}

fn fibs() -> Fibs {
    Fibs { fst: 0, snd: 1 }
}

struct Fibs {
    fst: u64,
    snd: u64,
}

impl Iterator for Fibs {
    type Item = u64;

    fn next(&mut self) -> Option<u64> {
        let res = self.fst + self.snd;
        self.fst = self.snd;
        self.snd = res;
        Some(res)
    }
}
